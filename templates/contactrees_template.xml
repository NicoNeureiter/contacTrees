<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions:contactrees:contactrees.model:contactrees.operators'
    templateinfo='template for standard phylogenetic analysis,&lt;br> supporting tip-date analysis and calibrations'>

<map name='connect' reserved='true'>beast.app.beauti.BeautiConnector</map>
<map name='subtemplate' reserved='true'>beast.app.beauti.BeautiSubTemplate</map>
<map name='Uniform'>beast.math.distributions.Uniform</map>
<map name='Normal'>beast.math.distributions.Normal</map>
<map name='OneOnX'>beast.math.distributions.OneOnX</map>
<map name='LogNormal'>beast.math.distributions.LogNormalDistributionModel</map>
<map name='Exponential'>beast.math.distributions.Exponential</map>
<map name='Gamma'>beast.math.distributions.Gamma</map>
<map name='Beta'>beast.math.distributions.Beta</map>
<map name='LaplaceDistribution'>beast.math.distributions.LaplaceDistribution</map>
<map name='InverseGamma'>beast.math.distributions.InverseGamma</map>
<map name='prior'>beast.math.distributions.Prior</map>

    <beauticonfig spec='BeautiConfig'
        inputLabelMap='beast.core.MCMC.operator=Operators,
            beast.core.MCMC.logger=Loggers,
            beast.evolution.sitemodel.SiteModel.mutationRate =Substitution Rate,
            beast.evolution.speciation.YuleModel.birthDiffRate=Birth Rate'
        inlinePlugins ='beast.core.MCMC.distribution,
            beast.evolution.sitemodel.SiteModel.substModel,
            beast.evolution.tree.coalescent.ExponentialGrowth,
            beast.evolution.tree.coalescent.ConstantPopulation,
            beast.evolution.tree.coalescent.Coalescent,
            beast.core.State.stateNode,
            contactrees.MarginalTree'
        collapsedPlugins ='beast.core.MCMC.logger'
        suppressPlugins = 'beast.core.MCMC.operator,
            beast.core.MCMC.operatorschedule,
            beast.core.OperatorSchedule.subschedule,
            beast.core.OperatorSchedule.operatorPattern,
            beast.core.OperatorSchedule.operator,
            beast.evolution.tree.coalescent.Coalescent.treeIntervals,
            beast.evolution.tree.coalescent.Coalescent.tree,
            beast.core.MCMC.state,
            beast.core.MCMC.distribution,
            beast.core.MCMC.init,
            beast.evolution.speciation.BirthDeathGernhard08Model.treeIntervals,
            beast.evolution.speciation.BirthDeathGernhard08Model.tree,
            beast.evolution.speciation.BirthDeathGernhard08Model.sampleProbability,
            beast.evolution.speciation.YuleModel.treeIntervals,
            beast.evolution.speciation.YuleModel.useTipDates,
            beast.evolution.speciation.YuleModel.tree,
            beast.evolution.tree.Tree,
            beast.evolution.tree.Tree.trait,
            beast.evolution.tree.Tree.taxa,
            beast.evolution.tree.Tree.taxonset,
            beast.evolution.tree.Tree.nodetype,
            beast.evolution.tree.RandomTree.trait,
            beast.evolution.tree.RandomTree.initial,
            beast.evolution.tree.RandomTree.taxa,
            beast.evolution.tree.RandomTree.taxonset,
            beast.evolution.tree.RandomTree.estimate,
            beast.evolution.tree.RandomTree.nodetype,
            beast.util.TreeParser.initial,
            beast.util.TreeParser.taxa,
            beast.util.TreeParser.taxonset,
            beast.util.TreeParser.trait,
            beast.util.TreeParser.estimate,
            beast.util.TreeParser.nodetype,
            beast.util.ClusterTree.initial,
            beast.util.ClusterTree.taxa,
            beast.util.ClusterTree.taxonset,
            beast.util.ClusterTree.trait,
            beast.util.ClusterTree.estimate,
            beast.util.ClusterTree.nodetype,
            beast.util.ClusterTree.distance,
            beast.evolution.substitutionmodel.WAG.rates,
            beast.evolution.substitutionmodel.WAG.frequencies,
            beast.evolution.substitutionmodel.JTT.rates,
            beast.evolution.substitutionmodel.JTT.frequencies,
            beast.evolution.substitutionmodel.Blosum62.rates,
            beast.evolution.substitutionmodel.Blosum62.frequencies,
            beast.evolution.substitutionmodel.Dayhoff.rates,
            beast.evolution.substitutionmodel.Dayhoff.frequencies,
            beast.evolution.substitutionmodel.CPREV.rates,
            beast.evolution.substitutionmodel.CPREV.frequencies,
            beast.evolution.substitutionmodel.MTREV.rates,
            beast.evolution.substitutionmodel.MTREV.frequencies,
            beast.evolution.substitutionmodel.GTR.rates,
            beast.evolution.substitutionmodel.JukesCantor.frequencies,
            beast.math.distributions.Prior.x,
            beast.math.distributions.MRCAPrior.tree,
            beast.math.distributions.MRCAPrior.monophyletic,
            beast.math.distributions.MRCAPrior.taxonset,
            beast.evolution.branchratemodel.UCRelaxedClockModel.tree,
            beast.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
            beast.evolution.branchratemodel.UCRelaxedClockModel.distr,
            beast.evolution.branchratemodel.RandomLocalClockModel.tree,
            beast.evolution.branchratemodel.RandomLocalClockModel.meanRate,
            beast.evolution.branchratemodel.RandomLocalClockModel.indicators,
            beast.evolution.operators.ScaleOperator.indicator,
            beast.core.Operator.weight,
            beast.core.Logger.model,
            beast.evolution.tree.coalescent.BayesianSkyline.treeIntervals,
            beast.evolution.tree.coalescent.BayesianSkyline.groupSizes,
            beast.evolution.tree.coalescent.BayesianSkyline.popSizes,
            beast.evolution.speciation.YuleModel.originHeight,
            contactrees.ConversionGraph.taxonset,
            contactrees.model.ConversionRate.value,
			contactrees.model.ConversionPrior.expectedConversions,
			contactrees.model.ConversionPrior.network,
			contactrees.model.ConversionRate.network,
			contactrees.model.ConversionMovePrior.network,
			contactrees.model.ConversionMovePrior.blockSet,
			contactrees.model.ConversionRate.keys,
			beast.core.parameter.RealParameter.keys
			'
        buttonLabelMap='beast.app.beauti.BeautiInitDlg.&gt;&gt; details=Edit parameters'
    >
        <!--disableMenus='Mode'-->

        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon='2220.png.x' forceExpansion='FALSE'
            type='beast.evolution.alignment.Alignment'
        />
        <mergepoint id='aux-partitions-panels'/>


		<panel spec='BeautiPanelConfig' panelname="Tip Dates" tiptext="Allows to specify data that a taxon was sampled"
            path='tree'
            hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
            isVisible='true'
        />
        <mergepoint id='aux-tipdates-panels'/>

        <panel spec='BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
            path='siteModel'
            hasPartitions="SiteModel" icon='3.png.x' forceExpansion='TRUE'
        />
        <mergepoint id='aux-sitemodel-panels'/>
        
        <panel spec='BeautiPanelConfig' panelname="Species Clock Model" tiptext="Clock model"
            path='branchRateModel'
            hasPartitions="ClockModel" icon='4.png.x' forceExpansion='TRUE'
        />
        <mergepoint id='aux-clockmodel-panels'/>
        <panel spec='BeautiPanelConfig' panelname="Initialization" tiptext="Initial state"
            path='state/stateNode'
            hasPartitions="none" icon='6.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'
        />
        <mergepoint id='aux-initilisation-panels'/>
        <panel spec='BeautiPanelConfig' panelname="Starting tree" tiptext="Starting tree"
            path='init'
            hasPartitions="none" icon='6.png.x' forceExpansion='TRUE'
            isVisible='false'
        />

        <panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon='7.png.x' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.core.Distribution'
        />
        <mergepoint id='aux-priors-panels'/>

        <panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="none" icon='8.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false' buttonStatus='ADD_ONLY'
        />
        <mergepoint id='aux-operators-panels'/>

        <panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="none" icon='9.png.x' forceExpansion='TRUE'
        />
        <mergepoint id='aux-panels'/>

        <alignmentProvider id="Import Alignment" spec='BeautiAlignmentProvider' template='@StandardPartitionTemplate'/>


        <partitiontemplate id='StandardPartitionTemplate' spec='BeautiSubTemplate' class='beast.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
<![CDATA[
            <!-- site model                                                              -->
            <plugin spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
                <!--substModel will be automatically detected /-->
                <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
                <mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0'        estimate='false'/>
                <shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0'         estimate='false'/>
            </plugin>
            

            <plugin spec='contactrees.model.likelihood.CTreeLikelihood' id="treeLikelihood.$(n)" data="@data">
            	<tree idref="Tree.t:tree"/>
                <marginalTree id="MarginalTree.t:$(n)" spec="contactrees.MarginalTree" network="@Tree.t:tree" block="@block.$(n)" />
                <siteModel idref="SiteModel.s:$(n)"/>
                <branchRateModel spec='StrictClockModel' id='StrictClock.c:clock'>
                    <clock.rate id='clockRate.c:clock' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </plugin>
            
            <stateNode spec='contactrees.BlockSet' id='allBlocks' network='@Tree.t:tree'/>
            <block spec='contactrees.Block' id='block.$(n)'/>
            
            <plugin id='expectedConversions' spec='parameter.RealParameter' estimate='false' value='0.25'/>
            <plugin id='conversionRate' spec='contactrees.model.ConversionRate' expectedConversions='@expectedConversions' linearContactGrowth='true' network='@Tree.t:tree'/>
            <plugin id='pMove' spec='parameter.RealParameter' estimate='false' value='0.2'/>

            <prior id='ClockPrior.c:clock' x='@clockRate.c:clock'><distr spec='beast.math.distributions.Uniform' upper='Infinity'/></prior>
            <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'><distr spec="OneOnX"/></prior>

            <!-- tree and its properties -->
            <taxonset id='taxonSet' spec='beast.evolution.alignment.TaxonSet' alignment='@$(n)' />
            <plugin spec='contactrees.ConversionGraph' id='Tree.t:tree' taxonset='@taxonSet'/>
            
            <!--plugin spec='beast.evolution.tree.RandomTree' id='RandomTree.t' estimate='false' trait='@datetrait.$(n)' initial='@Tree.t:tree'-->
            <!--plugin spec='beast.evolution.tree.RandomTree' id='RandomTree.t' estimate='false' initial='@Tree.t:tree'-->
            <plugin spec='contactrees.RandomACG' id='RandomTree.t' estimate='false' initial='@Tree.t:tree'>
                <taxa idref='data'/>
                <populationModel id='ConstantPopulation0' spec='ConstantPopulation'>
                    <popSize id='randomPopSize' spec='parameter.RealParameter' value='1'/>
                </populationModel>
            </plugin>

            <!-- default tree prior -->
            <plugin id="YuleModel.t:tree" spec="beast.evolution.speciation.YuleModel" tree="@Tree.t:tree">
                <parameter name='birthDiffRate' id="birthRate.t:tree" value='1.0' estimate='true'/>
            </plugin>
            
            <prior id="ConvPrior.t:tree" spec="contactrees.model.ConversionPrior" network="@Tree.t:tree" conversionRate="@conversionRate" linearContactGrowth="true" upperConvCountBound="50"/>
            <prior id="ConvMovePrior.t:tree" spec="contactrees.model.ConversionMovePrior" network="@Tree.t:tree" blockSet="@allBlocks" pMove="@pMove"/>
            <prior id="ExpectedConversionsPrior.t:tree" name="distribution" x="@expectedConversions">
                <distr spec="Exponential" mean="0.1" />
            </prior>
            <prior id="pMovePrior.t:tree" name="distribution" x="@pMove">
                <distr spec="Beta" alpha="2" beta="16" />
            </prior>

            <plugin id='TreeHeight' spec='beast.evolution.tree.TreeHeightLogger' tree='@Tree.t:tree'/>

            <logger id='treelog' spec='beast.core.Logger' logEvery="1000" fileName="$(tree).trees" mode='tree'>
                <log id='TreeWithMetaDataLogger' spec='beast.evolution.tree.TreeWithMetaDataLogger' tree='@Tree.t:tree'>
                </log>
            </logger>

            <operator id="CFWilsonBalding" spec="contactrees.operators.CFWilsonBalding" acg="@Tree.t:tree" conversionRate="@conversionRate" pMove="@pMove" blockSet="@allBlocks" includeRoot="false" alpha="0.1" conversionPrior="@ConvPrior.t:tree" weight="1.0"/>
            <operator id="CFNarrowExchange" spec="contactrees.operators.CFSubtreeExchange" acg="@Tree.t:tree" conversionRate="@conversionRate" pMove="@pMove" blockSet="@allBlocks" isNarrow="true" conversionPrior="@ConvPrior.t:tree" weight="10.0"/>
            <operator id="CFWideExchange" spec="contactrees.operators.CFSubtreeExchange" acg="@Tree.t:tree" conversionRate="@conversionRate" pMove="@pMove" blockSet="@allBlocks" isNarrow="false" conversionPrior="@ConvPrior.t:tree" weight="1.0"/>
            <operator id="ACGScaler" spec="contactrees.operators.ACGScaler" acg="@Tree.t:tree" scaleFactor="0.9" weight="3.0"/>

            <operator id="ACGScaler_clockInverse" spec="contactrees.operators.ACGScaler" acg="@Tree.t:tree" scaleFactor="0.9" weight="7.0">
            </operator>

            <operator id="ACGScaler_rootOnly" spec="contactrees.operators.ACGScaler" acg="@Tree.t:tree" scaleFactor="0.75" weight="1.0" rootOnly="true"/>
            <operator id="CFUniform" spec="contactrees.operators.CFUniform" acg="@Tree.t:tree" conversionRate="@conversionRate" pMove="@pMove" blockSet="@allBlocks" scaleFactor="0.9" conversionPrior="@ConvPrior.t:tree" weight="28.0"/>
            <operator id="AddRemoveConversion" spec="contactrees.operators.AddRemoveConversionGibbs" weight="50.0" acg="@Tree.t:tree" pMove="@pMove" conversionRate="@conversionRate" blockSet="@allBlocks" conversionPrior="@ConvPrior.t:tree">
            </operator>
            <operator id="GibbsSampleMovesPerConversion" spec="contactrees.operators.GibbsSampleMovesPerConversion" weight="10.0" acg="@Tree.t:tree" pMove="@pMove" blockSet="@allBlocks" mcmcmc="true">
            </operator>
        
            <operator id="ConvertedEdgeSlide" spec="contactrees.operators.ConvertedEdgeSlide" acg="@Tree.t:tree" apertureSize="0.2" weight="15.0"/>
            <operator id="ConvertedEdgeFlip" spec="contactrees.operators.ConvertedEdgeFlip" acg="@Tree.t:tree" weight="1.0"/>
            <operator id="ConversionSplit" spec="contactrees.operators.ConversionSplit" acg="@Tree.t:tree" weight="1.0" blockSet="@allBlocks" conversionRate="@conversionRate" conversionPrior="@ConvPrior.t:tree" flip="false" pMove="@pMove"/>
            <operator id="ConvertedEdgeHop.source" spec="contactrees.operators.ConvertedEdgeHopGibbs" acg="@Tree.t:tree" sourceOnly="true" blockSet="@allBlocks" pMove="@pMove" conversionRate="@conversionRate" conversionPrior="@ConvPrior.t:tree" weight="2.0"/>
            <operator id="ConvertedEdgeHop.source.narrow" spec="contactrees.operators.ConvertedEdgeHopGibbs" acg="@Tree.t:tree" sourceOnly="true" nClosestRelatives="3" blockSet="@allBlocks" pMove="@pMove" conversionRate="@conversionRate" conversionPrior="@ConvPrior.t:tree" weight="6.0"/>
            <operator id="ConvertedEdgeHop.narrow" spec="contactrees.operators.ConvertedEdgeHopGibbs" acg="@Tree.t:tree" blockSet="@allBlocks" nClosestRelatives="3" pMove="@pMove" conversionRate="@conversionRate" conversionPrior="@ConvPrior.t:tree" weight="2.0"/>

            <operator id="expectedConversionsScaler" spec="ScaleOperator" parameter="@expectedConversions" scaleFactor="0.3" weight="1.0" />
            <operator id="pMoveScaler" spec="ScaleOperator" parameter="@pMove" scaleFactor="0.3" weight="1.0" />

            <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
            <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@mutationRate.s:$(n)"/>
            <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@gammaShape.s:$(n)"/>
            <operator id='allTipDatesRandomWalker' spec='TipDatesRandomWalker' windowSize="1" weight="0" tree="@Tree.t:tree"/>


            <prior id='YuleBirthRatePrior.t:tree' x='@birthRate.t:tree'><distr spec="beast.math.distributions.Uniform" lower='0' upper='Infinity'/></prior>
            <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'><distr spec="beast.math.distributions.Exponential"><mean spec="parameter.RealParameter" estimate="false" value="1.0"/></distr></prior>
            <prior id='PropInvariantPrior.s:$(n)' x='@proportionInvariant.s:$(n)'><distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/></prior>
            <operator id='YuleBirthRateScaler.t:tree' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter="@birthRate.t:tree"/>
            <operator id='StrictClockRateScaler.c:clock' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.c:clock'/>

]]>

            <connect srcID='treeLikelihood.$(n)'              targetID='likelihood' inputName='distribution' if="isInitializing"/>
            <connect srcID='YuleModel.t:tree'                 targetID='prior' inputName='distribution' if="isInitializing"/>
            <connect srcID='ConvPrior.t:tree'                        targetID='prior' inputName='distribution' if="isInitializing"/>
            <connect srcID='ConvMovePrior.t:tree'                    targetID='prior' inputName='distribution' if="isInitializing"/>
            <connect srcID='ExpectedConversionsPrior.t:tree'         targetID='prior' inputName='distribution' if="expectedConversions/estimate=true"/>
            <connect srcID='pMovePrior.t:tree'                       targetID='prior' inputName='distribution' if="pMove/estimate=true"/>
            <connect method="beast.app.beauti.SiteModelInputEditor.customConnector"/>

            <connect srcID='treelog'                          targetID='mcmc' inputName='logger' if='inposterior(Tree.t:tree) and Tree.t:tree/estimate=true'/>
            <connect srcID='RandomTree.t'                     targetID='mcmc' inputName='init'   if='isInitializing'/>
            <connect method="beast.app.beauti.StateNodeInitialiserListInputEditor.customConnector"/>

            <connect srcID='ClockPrior.c:clock'               targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:clock) and clockRate.c:clock/estimate=true'/>
<!-- when FixMeanMutationRatesOperator, the prior is uniform due to the operator -->
            <connect srcID='MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>

            <connect srcID='Tree.t:tree'                      targetID='state' inputName='stateNode' if='inposterior(Tree.t:tree) and Tree.t:tree/estimate=true'/>
            <connect srcID='block.$(n)'                       targetID='state' inputName='stateNode' if='inposterior(Tree.t:tree)'/>
            <connect srcID='expectedConversions'              targetID='state' inputName='stateNode' if='inposterior(Tree.t:tree) and expectedConversions/estimate=true'/>
            <!--connect srcID='conversionRate'                   targetID='state' inputName='stateNode' if='inposterior(Tree.t:tree) and conversionRate/estimate=true'/-->
            <connect srcID='pMove'                            targetID='state' inputName='stateNode' if='inposterior(Tree.t:tree) and pMove/estimate=true'/>
            
            <connect srcID='proportionInvariant.s:$(n)'       targetID='state' inputName='stateNode' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)'              targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'                targetID='state' inputName='stateNode' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:clock'                targetID='state' inputName='stateNode' if='inlikelihood(clockRate.c:clock) and clockRate.c:clock/estimate=true'/>
            <connect srcID='birthRate.t:tree'                 targetID='state' inputName='stateNode' if='inposterior(YuleModel.t:tree) and inposterior(Tree.t:tree) and birthRate.t:tree/estimate=true'/>
            <connect srcID='block.$(n)'                       targetID='allBlocks' inputName='block' if='inposterior(block.$(n))'/>
            
            <connect srcID='proportionInvariantScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Scales proportion of invariant sites parameter of partition $(n)</connect>
            <connect srcID='mutationRateScaler.s:$(n)'        targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='gammaShapeScaler.s:$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
            <connect srcID='StrictClockRateScaler.c:clock'    targetID='mcmc' inputName='operator' if='inlikelihood(clockRate.c:clock) and clockRate.c:clock/estimate=true'>Scale clock rate of partition c:$(n)</connect>
            <connect srcID='YuleBirthRateScaler.t:tree'       targetID='mcmc' inputName='operator' if='inposterior(birthRate.t:tree) and birthRate.t:tree/estimate=true'>Scales birth rate of Yule prior</connect>

            <connect srcID='allTipDatesRandomWalker'          targetID='mcmc' inputName='operator' if='inposterior(Tree.t:tree) and Tree.t:tree/estimate=true and allTipDatesRandomWalker/weight!=0.0'>Estimates tip dates</connect>
            <connect srcID='clockRate.c:clock'                targetID='ACGScaler_clockInverse' inputName='parameterInverse' if='inposterior(clockRate.c:clock)'/>

            <connect srcID='treeLikelihood.$(n)'  targetID='AddRemoveConversion' inputName='treeLikelihood' />
            <connect srcID='treeLikelihood.$(n)'  targetID='GibbsSampleMovesPerConversion' inputName='treeLikelihood' if='inposterior(treeLikelihood.$(n))'/>
            <connect srcID='treeLikelihood.$(n)'  targetID='ConvertedEdgeHop.source' inputName='treeLikelihood' if='inposterior(treeLikelihood.$(n))'/>
            <connect srcID='treeLikelihood.$(n)'  targetID='ConvertedEdgeHop.source.narrow' inputName='treeLikelihood' if='inposterior(treeLikelihood.$(n))'/>
            <connect srcID='treeLikelihood.$(n)'  targetID='ConvertedEdgeHop.narrow' inputName='treeLikelihood' if='inposterior(treeLikelihood.$(n))'/>

            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="CFWilsonBalding" targetID="mcmc">Performs Wilson-Balding global rearrangement of acg</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="CFNarrowExchange" targetID="mcmc">Narrow exchange performs local rearrangement of acg</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="CFWideExchange" targetID="mcmc">Wide exchange performs global rearrangement of acg</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ACGScaler" targetID="mcmc">Scales all internal nodes for acg and scales the clock rate in the opposite direction</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ACGScaler_clockInverse" targetID="mcmc">Scales all internal nodes for acg and scales the clock rate inversely to the node height</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ACGScaler_rootOnly" targetID="mcmc"></connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="CFUniform" targetID="mcmc">Draws a new internal node height uniformally for acg</connect>
            
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="AddRemoveConversion" targetID="mcmc">Add or remove a contact edge from acg</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="GibbsSampleMovesPerConversion" targetID="mcmc">Resample the moves (borrowings) at a random contact edge</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ConvertedEdgeHop.source" targetID="mcmc">Randomly change the source of a contact edge</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ConvertedEdgeHop.source.narrow" targetID="mcmc">Randomly change the source of a contact edges to a branch near the previous one.</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ConvertedEdgeHop.narrow" targetID="mcmc">Randomly change the source or target of a contact edge to a branch near the previous one.</connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ConvertedEdgeSlide" targetID="mcmc"></connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ConvertedEdgeFlip" targetID="mcmc"></connect>
            <connect if="Tree.t:tree/estimate=true" inputName="operator" srcID="ConversionSplit" targetID="mcmc"></connect>
                        
            <connect if="expectedConversions/estimate=true" inputName="operator" srcID="expectedConversionsScaler" targetID="mcmc"></connect>
            <connect if="pMove/estimate=true" inputName="operator" srcID="pMoveScaler" targetID="mcmc"></connect>
            
            <connect srcID='treeLikelihood.$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(treeLikelihood.$(n))'/>
            <connect srcID='TreeHeight'                       targetID='tracelog' inputName='log' if='inposterior(Tree.t:tree)  and Tree.t:tree/estimate=true'/>
            <connect srcID='proportionInvariant.s:$(n)'       targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'                targetID='tracelog' inputName='log' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:clock'                targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:clock) and clockRate.c:clock/estimate=true'/>
            <connect srcID='ConvPrior.t:tree'                 targetID='tracelog' inputName='log' if='inposterior(ConvPrior.t:tree) and inposterior(Tree.t:tree) and Tree.t:tree/estimate=true'/>
            <connect srcID='YuleModel.t:tree'                 targetID='tracelog' inputName='log' if='inposterior(YuleModel.t:tree) and inposterior(Tree.t:tree) and Tree.t:tree/estimate=true'/>
            <connect srcID='birthRate.t:tree'                 targetID='tracelog' inputName='log' if='inposterior(YuleModel.t:tree) and birthRate.t:tree/estimate=true'/>

            <connect srcID='GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Prior on gamma shape for partition s:$(n)</connect>
            <connect srcID='PropInvariantPrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Prior on proportion invariant for partition s:$(n)</connect>
            <connect srcID='YuleBirthRatePrior.t:tree'        targetID='prior' inputName='distribution' if='inposterior(YuleModel.t:tree) and inposterior(Tree.t:tree) and birthRate.t:tree/estimate=true'>Prior on Yule birth rate for partition s:$(n)</connect>

            <mergepoint id='aux-partitiontemplate'/>
        </partitiontemplate>

        <mergepoint id='substModelTemplates'/>
        <mergepoint id='clockModelTemplates'/>
        <mergepoint id='acgTreePriorTemplates'/>
        <mergepoint id='parametricDistributions'/>

        <subtemplate id='DefaultOperatorSchedule' class='beast.core.OperatorSchedule' mainid='OperatorSchedule'
            >
<![CDATA[
        <operatorschedule id="OperatorSchedule" spec="beast.core.OperatorSchedule"/>
]]>
        </subtemplate>
        

    </beauticonfig>


    <mergepoint id='misc'/>

<!-- framework for main model -->

    <run spec="MCMC" id="mcmc" chainLength="10000000">
        <operatorschedule id="OperatorSchedule" spec="OperatorSchedule"/>
        <state storeEvery='5000' id='state'>
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior">
                <mergepoint id='aux-priors'/>
            </distribution>
            <distribution spec="CompoundDistribution" id="likelihood" useThreads="true">
                <mergepoint id='aux-likelihoods'/>
            </distribution>
        </distribution>

        <logger id='tracelog' logEvery="1000" fileName="beast.log" sort="smart" sanitiseHeaders='true'>
            <model idref='posterior'/>
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>

        <logger id='screenlog' logEvery="1000">
            <!--model idref='posterior'/-->
            <log idref="posterior"/>
            <!--this ESS is computed solely based on the current BEAST run (not the chain)-->
            <!--<ESS spec='ESS' name='log' arg="@posterior"/>-->
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>

